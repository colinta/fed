#!/usr/bin/env node
const EventEmitter = require('events');

function toDelim(delim) {
  if (delim === '{' || delim === '}') {
    return /[\{\}]/
  }
  if (delim === '[' || delim === ']') {
    return /[\[\]]/
  }
  if (delim === '(' || delim === ')') {
    return /[\(\)]/
  }
  if (delim === '<' || delim === '>') {
    return /[<>]/
  }

  return delim
}

function unescape(str) {
  return str.replace(/\\(.)/g, (match, char) => {
    if (char === 'n') {
      return '\n'
    }
    if (char === 't') {
      return '\t'
    }
    return `\\${char}`
  })
}

// commands on, after, and off all share this value, turns printing on/off
let printOn = null

function parseRuleArgs(rule) {
  const command = rule.match(/^(\w+\b|\d+)(.)/)
  if (!command) {
    const [simpleCommand] = rule.match(/^(\w+\b|\d+)$/)
    if (!simpleCommand) {
      throw Error(`Invalid: ${rule}`)
    }
    return [simpleCommand, '', '', []]
  }

  const [cmd, delim] = [command[1], command[2]]
  const [, ...args] = rule.slice(delim.length).split(toDelim(delim)).map(unescape)
  const [match, replace] = args

  return [cmd, match, replace, args]
}

function toLineRule([cmd, match, replace, args]) {
  if (cmd === 'sub' || cmd === 's') {
    // this is text | sub/this/that => that is text
    // this is text | s|this|that => that is text
    const regex = new RegExp(match)
    return (line) => {
      return line.replace(regex, replace)
    }
  } else if (cmd === 'gsub' || cmd === 'g') {
    // this is text | sub/t/T => This is TexT
    // this is text | s|\bt|T => This is Text
    const regex = new RegExp(match, 'g')
    return (line) => {
      return line.replace(regex, replace)
    }
  } else if (cmd === 'take' || cmd === 't') {
    // this is text | take/t\w+ => this
    // this is text | +/t\w+ => this
    const regex = new RegExp(match)
    return (line) => {
      const match = line.match(regex)
      if (match && match[0]) {
        return match[0]
      }
      return line
    }
  } else if (cmd === 'remove' || cmd === 'rm' || cmd === 'r') {
    // this is text | remove/\w+is => is text
    // this is text | -- +is => this text
    const regex = new RegExp(match)
    return (line) => {
      if (line.match(regex)) {
        return line.replace(regex, '')
      }
      return line
    }
  } else if (cmd === 'on' || cmd === 'o') {
    // this
    // 1
    // is
    // long
    // 2
    // text | on/1 => 1
    //                is
    //                long
    //                2
    //                text
    const regex = new RegExp(match)
    return (line) => {
      if (line.match(regex) || printOn === true) {
        printOn = true
        return line
      }
    }
  } else if (cmd === 'after' || cmd === 'a') {
    // this
    // 1
    // is
    // long
    // 2
    // text | after/1 => is
    //                   long
    //                   2
    //                   text
    const regex = new RegExp(match)
    return (line) => {
      if (line.match(regex)) {
        printOn = true
      } else if (printOn === true) {
        return line
      }
    }
  } else if (cmd === 'off' || cmd === 'f') {
    // this
    // 1
    // is
    // long
    // 2
    // text | after/1 off/2 => is
    //                         long
    const regex = new RegExp(match)
    return (line) => {
      if (line.match(regex)) {
        printOn = false
      } else {
        return line
      }
    }
  } else if (cmd.match(/^\d+$/)) {
    // this is text | 1/\w(\w+)$ => ext
    // this is text | 2/(\w+) (\w+) (\w+) => is
    const regex = new RegExp(match)
    return (line) => {
      const match = line.match(regex)
      const index = parseInt(cmd)
      if (match && match[index]) {
        return match[index]
      }
    }
  } else if (cmd === 'print' || cmd === 'p') {
    // this
    // is
    // text | p/^t => this
    //                text
    const regex = new RegExp(match)
    return (line) => {
      if (line.match(regex)) {
        return line
      }
    }
  } else if (cmd === 'kill' || cmd === 'k') {
    // this
    // is
    // some
    // text | k/is => some
    //                text
    const regex = new RegExp(match)
    return (line) => {
      if (!line.match(regex)) {
        return line
      }
    }
  } else if (cmd === 'uniq') {
    const lines = []
    return (line) => {
      if (lines.indexOf(line) === -1) {
        lines.push(line)
        return line
      }
    }
  }
}

function toDocumentRule([cmd, match, replace, args]) {
  if (cmd === 'sort') {
    return (lines) => {
      return lines.sort()
    }
  } else if (cmd === 'reverse') {
    return (lines) => {
      return lines.reverse()
    }
  }
}

function lineStream(inputStream, transform) {
  const stdin = new EventEmitter();
  let buffer = ''

  function emit(line) {
    if (transform) {
      line = transform(line)
    }

    if (line !== undefined) {
      stdin.emit('line', line)
    }
  }

  inputStream.resume()
  inputStream.setEncoding('utf-8')
  inputStream.on('data', function(chunk) {
    buffer += chunk
    const lines = buffer.split("\n")
    buffer = lines.pop()
    lines.forEach(line => emit(line));
  });

  inputStream.on('end', () => {
    if (buffer.length > 0) emit(buffer);
    stdin.emit('end')
  })

  stdin.pipe = (transform) => {
    return lineStream(stdin, transform)
  }

  return stdin
}

const args = process.argv.slice(2)
const lineRules = []
const documentRules = []
for (const arg of args) {
  const parsed = parseRuleArgs(arg)
  let lineRule, documentRule
  if (lineRule = toLineRule(parsed)) {
    if (documentRules.length) {
      throw new Error('Document rules are only supported *after* all the line rules (use multiple ssed pipes I guess?)')
    }

    lineRules.push(lineRule)
  } else if (documentRule = toDocumentRule(parsed)) {
    documentRules.push(documentRule)
  } else {
    throw new Error(`Invalid rule: ${arg}`)
  }
}

const stdin = lineStream(process.stdin)
let lines = []
stdin.on('line', line => {
  for (const lineRule of lineRules) {
    line = lineRule(line)
    if (line === undefined) {
      return
    }
  }
  if (documentRules.length) {
    lines.push(line)
  } else {
    process.stdout.write(line + "\n")
  }
}).on('end', () => {
  if (documentRules.length === 0) {
    return
  }

  for (const documentRule of documentRules) {
    lines = documentRule(lines)
    if (!lines?.length) {
      return
    }
  }
  process.stdout.write(lines.join("\n"))
});
