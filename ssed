#!/usr/bin/env node
const fs = require("fs");
const inspect = require("util").inspect;
const EventEmitter = require("events");

function toDelim(delim) {
  if (delim === "{" || delim === "}") {
    return /[\{\}]/;
  }
  if (delim === "[" || delim === "]") {
    return /[\[\]]/;
  }
  if (delim === "(" || delim === ")") {
    return /[\(\)]/;
  }
  if (delim === "<" || delim === ">") {
    return /[<>]/;
  }

  return delim;
}

function unescape(str) {
  return str.replace(/\\(.)/g, (_, char) => {
    if (char === "n") {
      return "\n";
    }
    if (char === "t") {
      return "\t";
    }
    return `\\${char}`;
  });
}

function parseRuleArgs(rule) {
  const command = rule.match(/^(\w+\b|\d+)(.)/);
  if (!command) {
    const [simpleCommand] = rule.match(/^(\w+\b|\d+)$/) ?? [];
    if (!simpleCommand) {
      throw Error(`Invalid: ${rule}`);
    }
    return [simpleCommand, "", "", []];
  }

  const [cmd, delim] = [command[1], command[2]];
  const [, ...args] = rule
    .slice(delim.length)
    .split(toDelim(delim))
    .map(unescape);
  const [match, replace] = args;

  return [cmd, match, replace, args, delim];
}

function toLineRule([cmd, match, replace, _, delim], state) {
  if (cmd === "sub" || cmd === "s") {
    if (delim === ":") {
      // this
      // is
      // text | sub:1:that => that
      //                      is
      //                      text
      const ranges = toLineRanges(match);
      return (line, lineNo) => {
        if (
          ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo)
        ) {
          return replace;
        }

        return line;
      };
    }

    // this is text | sub/this/that => that is text
    // this is text | s|this|that => that is text
    const regex = new RegExp(match);
    return (line) => {
      return line.replace(regex, replace);
    };
  } else if (cmd === "gsub" || cmd === "g") {
    if (delim === ":") {
      throw Error("'gsub' does not support ':' delimiter");
    }

    // this is text | sub/t/T => This is TexT
    // this is text | s|t|T => This is Text
    const regex = new RegExp(match, "g");
    return (line) => {
      return line.replace(regex, replace);
    };
  } else if (cmd === "take" || cmd === "t") {
    if (delim === ":") {
      // this
      // is
      // text | take:1:that => this
      //
      // same as print:
      const ranges = toLineRanges(match);
      return (line, lineNo) => {
        if (
          ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo)
        ) {
          return line;
        }
      };
    }

    // this is text | take/t\w+ => this
    // this is text | t/t\w+ => this
    // how now      | take/t\w+ => how now
    const regex = new RegExp(match);
    return (line) => {
      const match = line.match(regex);
      if (match && match[0]) {
        return match[0];
      }
      return line;
    };
  } else if (cmd === "rm" || cmd === "r") {
    if (delim === ":") {
      // this
      // is
      // text | rm:1 => is
      //                text
      //
      // same as kill:
      const ranges = toLineRanges(match);
      return (line, lineNo) => {
        if (
          ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo)
        ) {
          return;
        }
        return line;
      };
    }

    // this is text | rm/^\w+ is/ => text
    const regex = new RegExp(match);
    return (line) => {
      if (line.match(regex)) {
        return line.replace(regex, "");
      }
      return line;
    };
  } else if (cmd === "on" || cmd === "o") {
    // this
    // 1
    // is
    // long
    // 2
    // text | on/1 => 1
    //                is
    //                long
    //                2
    //                text
    let check = (_line, _lineNo) => true;
    if (delim === ":") {
      // turns 'on' at the line number match
      const ranges = toLineRanges(match);
      check = (_, lineNo) =>
        ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo);
    } else if (match) {
      const regex = new RegExp(match);
      check = (line) => line.match(regex);
    }

    return (line, lineNo) => {
      if (check(line, lineNo) || state.printOn === true) {
        state.printOn = true;
        return line;
      }
    };
  } else if (cmd === "after" || cmd === "a") {
    // this
    // 1
    // is
    // long
    // 2
    // text | after/1 => is
    //                   long
    //                   2
    //                   text
    let check = (_line, _lineNo) => true;
    if (delim === ":") {
      // turns 'on' at the line number match
      const ranges = toLineRanges(match);
      check = (_, lineNo) =>
        ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo);
    } else if (match) {
      const regex = new RegExp(match);
      check = (line) => line.match(regex);
    }

    return (line, lineNo) => {
      if (check(line, lineNo)) {
        state.printOn = true;
      } else if (state.printOn === true) {
        return line;
      }
    };
  } else if (cmd === "off" || cmd === "f") {
    // this
    // 1
    // is
    // long
    // 2
    // text | after/1 off/2 => is
    //                         long
    let check = (_line, _lineNo) => true;
    if (delim === ":") {
      // turns 'on' at the line number match
      const ranges = toLineRanges(match);
      check = (_, lineNo) =>
        ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo);
    } else if (match) {
      const regex = new RegExp(match);
      check = (line) => line.match(regex);
    }

    return (line, lineNo) => {
      if (check(line, lineNo)) {
        state.printOn = false;
      } else if (state.printOn === true) {
        return line;
      }
    };
  } else if (cmd.match(/^\d+$/)) {
    // this is text | 1/\w(\w+)$ => ext
    // this is text | 2/(\w+) (\w+) (\w+) => is
    const index = parseInt(cmd);
    const regex = new RegExp(match);
    return (line) => {
      const match = line.match(regex);
      if (match) {
        if (match[index]) {
          return match[index];
        }
      } else {
        return line;
      }
    };
  } else if (cmd === "print" || cmd === "p") {
    if (delim === ":") {
      // this
      // is
      // text | print:2-3 => is
      //                     text
      //
      // same as take:
      const ranges = toLineRanges(match);
      return (line, lineNo) => {
        if (
          ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo)
        ) {
          return line;
        }
      };
    }

    // this
    // is
    // text | p/^t => this
    //                text
    const regex = new RegExp(match);
    return (line) => {
      if (line.match(regex)) {
        return line;
      }
    };
  } else if (cmd === "kill" || cmd === "k") {
    if (delim === ":") {
      // this
      // is
      // text | kill:1 => is
      //                  text
      //
      // same as rm:
      const ranges = toLineRanges(match);
      return (line, lineNo) => {
        if (
          ranges.some(([startNo, endNo]) => lineNo >= startNo && lineNo < endNo)
        ) {
          return;
        }
        return line;
      };
    }

    // this
    // is
    // some
    // text | k/is => some
    //                text
    const regex = new RegExp(match);
    return (line) => {
      if (!line.match(regex)) {
        return line;
      }
    };
  } else if (cmd === "uniq" || cmd === "unique") {
    if (delim === ':') {
      throw Error("'uniq' does not support ':' delimiter");
    }

    const lines = [];
    let part = (line) => line;
    if (match) {
      const regex = new RegExp(match);
      part = (line) => line.match(regex)?.[0];
    }

    return (line) => {
      match = part(line);
      if (match == null) {
        return null;
      }

      if (lines.indexOf(match) === -1) {
        lines.push(match);
        return line;
      }
    };
  }
}

function toDocumentRule([cmd, match, replace]) {
  if (cmd === "sort") {
    return (lines) => {
      return lines.sort(([a], [b]) => a.localeCompare(b));
    };
  } else if (cmd === "reverse") {
    return (lines) => {
      return lines.reverse();
    };
  } else if (cmd === "prefix") {
    return (lines) => {
      const max = lines.length;
      return lines.map(([line, lineNo]) => {
        let pad = " ".repeat(max.toString().length - lineNo.toString().length);
        pad += lineNo.toString();
        return [pad + ":" + line, lineNo];
      });
    };
  }
}

function toLineRanges(match) {
  if (match.includes(",")) {
    return match.split(",").flatMap((m) => toLineRanges(m));
  }

  if (match.includes("-")) {
    const [start, stop] = match.split("-", 2).map(Number);
    return [[start, stop + 1]];
  }

  if (match.endsWith("+")) {
    return [[Number(match.slice(0, -1)), Infinity]];
  }

  return [[Number(match), Number(match) + 1]];
}

function lineStream(inputStream, transform = undefined) {
  const stdin = new EventEmitter();
  let buffer = "";
  let closed = false;

  function emit(line) {
    if (closed) {
      return;
    }

    if (transform) {
      line = transform(line);
    }

    if (line !== undefined) {
      stdin.emit("line", line);
    }
  }

  inputStream.resume();
  inputStream.setEncoding("utf-8");
  inputStream.on("open", function () {
    stdin.emit("open");
  });
  inputStream.on("data", function (chunk) {
    buffer += chunk;
    const lines = buffer.split("\n");
    buffer = lines.pop();
    lines.forEach((line) => emit(line));
  });

  inputStream.on("end", () => {
    if (buffer.length > 0) emit(buffer);
    let autoclose = true;
    function keepOpen() {
      autoclose = false;
    }
    function close() {
      stdin.emit("close");
    }
    stdin.emit("end", keepOpen, close);
    if (autoclose) {
      close();
    }
  });

  stdin.pause = inputStream.pause.bind(inputStream);
  stdin.close = () => {
    closed = true;
    inputStream.pause();
  };
  stdin.pipe = (transform) => {
    return lineStream(stdin, transform);
  };

  return stdin;
}

function parseOption(arg) {
  let option;
  if (arg.startsWith("--")) {
    [option] = arg.slice(2).match(/^([\w-]+)/) ?? [option];
  } else if (arg.startsWith("-")) {
    [option] = arg.slice(1).match(/^(\w+)/) ?? [option];
    return option.split("").map((opt) => parseOption(`--${opt}`));
  } else {
    return;
  }

  switch (option) {
    case "h":
    case "help": {
      process.stderr.write(`usage: ssed [options] [rules]

Options:
  --diff                       Only show differences
  --color                      Enable ANSI colors (true if stdout is a TTY)
  --input                      Take file names from standard input (\`ls | ssed --input\`)
  --input=fromfile             Use 'fromfile' as input
  --input=fromfile1,fromfile2  Run against multiple files.
  --write                      Write each changed file in place.
  --write=tofile               Provide a destination file name.
  --write=to\${file}           \${file} is replaced with the input file.
  --write=\${}.backup          \${} is replaced with the input file.
  --interactive                Ask before writing the file
  --dry-run (-n)               Show which files would be affected.

Line Rules
----------
Line rules operate on every line. Commands 'on', 'after' and 'off' share the on/off state.

  s/search/replace (aka sub/…/…)   Replace the first instance of 'search' with 'replace'
  g/search/replace (aka gsub/…/…)  Replace every instance of 'search' with 'replace'
  t/pattern (aka take/…)           Only print the matching part of the line, or print the entire line if 'pattern' doesn't match
  1/pattern                        Only print the first group of the match
  r/pattern (aka rm/…)             Remove the matching part of the line, or print the entire line if 'pattern' doesn't match
  o/pattern (aka on/…)             Start printing on the line where 'pattern' is matched
  a/pattern (aka after/…)          Start printing on the line *after* 'pattern' is matched
  f/pattern (aka off/…)            Turn printing off on the line where 'pattern' is matched
  p/pattern (aka print/…)          Only print lines that match 'pattern'
  k/pattern (aka kill/…)           Do not print lines that match 'pattern'
  uniq (aka unique)                Only print unique lines
  uniq/pattern                     Only print matching lines, and only unique matches

Document Rules:
  sort
  reverse

Separators:
  s/foo/bar
  s/foo/bar/
  s|foo|bar
  s{foo}bar
`);
      process.exit(0);
    }
    case "no-color":
    case "color": {
      return {
        color: option === "color",
      };
    }
    case "n":
    case "no-dry-run":
    case "dry-run": {
      return {
        dryRun: option === "dry-run",
      };
    }
    case "no-diff":
    case "diff": {
      return {
        diff: option === "diff",
      };
    }
    case "no-interactive":
    case "interactive": {
      return {
        interactive: option === "interactive",
      };
    }
    case "no-write":
    case "write": {
      const [, writeToFile] = arg.split("=", 2);

      return {
        write: option === "write",
        diff: option === "write",
        writeToFile,
      };
    }
    case "input": {
      const [, file] = arg.split("=", 2);
      if (file === undefined) {
        return { inputFromFile: true, input: null };
      } else {
        switch (file) {
          case "stdin":
            return { input: process.stdin };
          default:
            const files = file.split(",");
            if (files.length > 1) {
              return {
                inputFromFile: true,
                input: files.map((file) => {
                  if (fs.existsSync(file)) {
                    return file;
                  } else {
                    throw Error(`File does not exist: ${file}`);
                  }
                }),
              };
            } else {
              if (fs.existsSync(file)) {
                return { input: file, inputFromFile: true };
              } else {
                throw Error(`File does not exist: ${file}`);
              }
            }
        }
      }
      break;
    }
    default:
      throw Error(`Invalid option: ${option}`);
  }
}

function main(args) {
  let options = {
    input: process.stdin,
    inputFromFile: false,
    interactive: false,
    write: false,
    writeToFile: null,
    diff: false,
    diffHeader: "",
    diffContext: 3, // number of lines to print before and after diffs
    color: process.stdout.isTTY,
    print: (line, nl = true) => {
      process.stdout.write(line + (nl ? "\n" : ""));
    },
  };

  const lineRules = [];
  const documentRules = [];
  const state = {
    // line-commands `on`, `after`, and `off` all share this value; toggles printing on/off
    printOn: null,
  };

  const rules = [];
  for (const arg of args) {
    const option = parseOption(arg);
    if (option !== undefined) {
      options = { ...options, ...option };
    } else {
      rules.push(arg);
    }
  }

  if (options.inputFromFile && typeof options.input !== "string") {
    args = args.filter((arg) => !arg.startsWith("--input"));

    const files = [];
    function next() {
      const file = files.pop();
      if (!file) {
        return;
      }

      main([`--input=${file}`, ...args])
        .on("open", () => {
          if (!options.diff) {
            options.print(yellow(`ssed: ${file}`));
          }
        })
        .on("close", next);
    }

    if (options.input === null) {
      const stdin = lineStream(process.stdin);
      // treat stdin as list of files

      stdin
        .on("line", (file) => {
          files.push(file);
        })
        .on("close", () => {
          next();
        });
    } else if (Array.isArray(options.input)) {
      files.push(...options.input);
      next();
    }

    return;
  } else if (options.inputFromFile) {
    options.diffHeader = `diff ${options.input}
--- ${options.input}
+++ ssed ${args.map(escapeShell).join(" ")}`;

    const file = options.input;
    if (options.write && !options.writeToFile && file !== process.stdin) {
      options.writeToFile = file;
    } else if (options.writeToFile) {
      options.writeToFile = options.writeToFile
        .replace("${file}", file)
        .replace("${}", file);
    }

    options.input = fs.createReadStream(file);
  }

  for (const rule of rules) {
    const parsed = parseRuleArgs(rule);

    let lineRule, documentRule;
    if ((lineRule = toLineRule(parsed, state))) {
      lineRules.push(lineRule);
    } else if ((documentRule = toDocumentRule(parsed))) {
      documentRules.push(documentRule);
    } else {
      throw Error(`Invalid rule: ${rule}`);
    }
  }

  const inputStream = lineStream(options.input);
  const originalLines = [];
  let lines = [];
  let lineNo = 0;
  return inputStream
    .on("line", (line) => {
      const original = line;
      lineNo += 1;

      for (const lineRule of lineRules) {
        line = lineRule(line, lineNo);
        if (line == null) {
          break;
        }
      }

      originalLines.push([original, line ?? ""]);

      if (line != null) {
        lines.push([line, lineNo]);
      }
    })
    .on("end", (keepOpen, close) => {
      for (const documentRule of documentRules) {
        lines = documentRule(lines);
        if (!lines?.length) {
          break;
        }
      }

      lines = lines.map(([line]) => line);

      if (options.diff) {
        let lineRun = {
          hasDiff: false,
          lineNumber: 0,
          before: [],
          prev: [],
          next: [],
          after: [],
        };

        function flush(EOF = false) {
          const { before, prev, next, after, lineNumber } = lineRun;

          if (!EOF && lineNumber === -1) {
            return;
          }

          if (!EOF && after.length < options.diffContext) {
            return;
          }

          if (EOF && prev.length === 0 && next.length === 0) {
            return;
          }

          if (!lineRun.hasDiff) {
            options.print(yellow(options.diffHeader, options.color));
          }

          const firstIndex = Math.max(before.length - options.diffContext, 0);
          options.print(
            magenta(
              `@@ -${lineNumber + firstIndex},0 +${
                lineNumber + firstIndex
              },0 @@`,
              options.color,
            ),
          );
          for (const line of before.slice(firstIndex)) {
            options.print(` ${line}`);
          }

          for (const line of prev) {
            options.print(red(`-${line}`, options.color));
          }
          for (const line of next) {
            options.print(green(`+${line}`, options.color));
          }

          for (const line of after) {
            options.print(` ${line}`);
          }

          lineRun = {
            before: [],
            prev: [],
            next: [],
            after: [],
            hasDiff: true,
            lineNumber: -1,
          };
        }

        function push(prev, next, lineNumber) {
          if (lineRun.lineNumber === -1) {
            lineRun.lineNumber = lineNumber;
          }

          if (prev === next) {
            if (lineRun.prev.length) {
              lineRun.after.push(next);
            } else {
              lineRun.before.push(next);
            }

            flush(false);
          } else {
            lineRun.prev.push(prev);
            lineRun.next.push(next);
          }
        }

        originalLines.forEach(([original, line], lineNumber) => {
          if (documentRules.length) {
            line = lines[lineNumber] ?? "";
          }

          push(original, line, lineNumber);
        });

        flush(true);

        if (options.write && lineRun.hasDiff) {
          if (options.interactive) {
            if (!process.stdin.isTTY) {
              options.print(
                red(
                  `Cannot run interactively – input is coming from stdin`,
                  options.color,
                ),
              );
              process.exit(1);
            }

            options.print(
              yellow(
                `Write changes to ${options.writeToFile}? [Yn] `,
                options.color,
              ),
              false,
            );
            keepOpen();

            const stdin = lineStream(process.stdin);
            stdin.on("line", (line) => {
              if (line === "" || line === "y" || line === "yes") {
                if (options.dryRun) {
                  options.print(
                    yellow(`Dry Run: ${options.writeToFile}`, options.color),
                  );
                } else {
                  writeLinesToFile(lines, options.writeToFile);
                }
              } else if (line === "n") {
                options.print(
                  yellow(`Skipping ${options.writeToFile}`, options.color),
                );
              } else {
                options.print(
                  red(`Unknown response '${line}'. Aborting`, options.color),
                );
                process.exit(1);
              }
              stdin.close();
              close();
            });
          } else {
            if (options.dryRun) {
              options.print(
                yellow(`Dry Run: ${options.writeToFile}`, options.color),
              );
            } else {
              writeLinesToFile(lines, options.writeToFile);
            }
          }
        }
      } else {
        for (const line of lines) {
          options.print(line);
        }
      }
    });
}

try {
  // remove 'node' and 'ssed' from argv
  main(process.argv.slice(2));
} catch (e) {
  process.stderr.write(`ssed: ${e.message}\n`);
}

function ansi(code, input) {
  return `\x1b[${code}m${input}\x1b[0m`;
}

function red(input, enabled) {
  return enabled ? ansi("1;31", input) : input;
}

function green(input, enabled) {
  return enabled ? ansi("1;32", input) : input;
}

function yellow(input, enabled) {
  return enabled ? ansi("38;5;227", input) : input;
}

function magenta(input, enabled) {
  return enabled ? ansi("1;35", input) : input;
}

function escapeShell(arg) {
  if (arg.match(/[;\\]/)) {
    return '"' + arg.replaceAll("\\", "\\\\").replaceAll('"', '\\"') + '"';
  }

  return arg;
}

function writeLinesToFile(lines, file) {
  if (!file) {
    return;
  }

  if (Array.isArray(lines)) {
    lines = lines.join("\n");
  }

  fs.writeFileSync(file, lines);
}
